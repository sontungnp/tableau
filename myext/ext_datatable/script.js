'use strict'

// H√†m chu·∫©n h√≥a ch·ªâ ƒë·ªÉ ƒë·ªìng b·ªô Unicode, kh√¥ng b·ªè d·∫•u
function normalizeUnicode(str) {
  return str ? str.normalize('NFC').toLowerCase().trim() : ''
}

// Pivot Measure Names/Values
function pivotMeasureValues(
  table,
  excludeIndexes = [],
  fieldFormat = 'snake_case'
) {
  // üîπ H√†m chuy·ªÉn format cho key field
  const formatField = (str) => {
    switch (fieldFormat) {
      case 'camelCase':
        return str
          .replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, (match, index) =>
            index === 0 ? match.toLowerCase() : match.toUpperCase()
          )
          .replace(/\s+/g, '')
      case 'snake_case':
        return str.replace(/\s+/g, '_')
      default:
        return str // Gi·ªØ nguy√™n
    }
  }

  const cols = table.columns.map((c) => c.fieldName)
  const rows = table.data.map((r) =>
    r.map((c) =>
      c.formattedValue === null || c.formattedValue === undefined
        ? ''
        : c.formattedValue
    )
  )

  // üîπ Lo·∫°i b·ªè c·ªôt kh√¥ng c·∫ßn
  const filteredCols = cols.filter((_, i) => !excludeIndexes.includes(i))
  const filteredRows = rows.map((r) =>
    r.filter((_, i) => !excludeIndexes.includes(i))
  )

  // üîπ X√°c ƒë·ªãnh v·ªã tr√≠ Measure Names / Values
  const measureNameIdx = filteredCols.findIndex((c) =>
    c.toLowerCase().includes('measure names')
  )
  const measureValueIdx = filteredCols.findIndex((c) =>
    c.toLowerCase().includes('measure values')
  )

  const dimensionIdxs = filteredCols
    .map((c, i) => i)
    .filter((i) => i !== measureNameIdx && i !== measureValueIdx)

  const pivotMap = new Map()
  const measureSet = new Set()

  filteredRows.forEach((r) => {
    const dimKey = dimensionIdxs.map((i) => r[i]).join('||')
    const mName = r[measureNameIdx]
    const mValue = r[measureValueIdx]

    measureSet.add(mName)

    if (!pivotMap.has(dimKey)) {
      pivotMap.set(dimKey, {
        dims: dimensionIdxs.map((i) => r[i]),
        measures: {}
      })
    }
    pivotMap.get(dimKey).measures[mName] = mValue
  })

  const measureNames = Array.from(measureSet)
  const headers = [
    ...dimensionIdxs.map((i) => filteredCols[i]),
    ...measureNames
  ]
  const isMeasure = [
    ...dimensionIdxs.map(() => false),
    ...measureNames.map(() => true)
  ]

  // ‚ö° Sinh d·ªØ li·ªáu d·∫°ng object (key = field format)
  const data = Array.from(pivotMap.values()).map((entry) => {
    const row = {}
    headers.forEach((h, idx) => {
      // B·ªè ph·∫ßn (width) n·∫øu c√≥
      const cleanHeader = h.replace(/\(\s*\d+\s*\)\s*$/, '').trim()
      const key = formatField(cleanHeader)

      if (idx < dimensionIdxs.length) {
        row[key] = entry.dims[idx]
      } else {
        const mName = measureNames[idx - dimensionIdxs.length]
        const rawValue = entry.measures[mName] || ''
        const numValue = parseFloat(rawValue.toString().replace(/,/g, ''))
        row[key] = !isNaN(numValue) ? numValue : rawValue
      }
    })
    return row
  })

  // ‚ö° columnDefs kh·ªõp field format, c√≥ x·ª≠ l√Ω width v√† numericColumn
  const columnDefs = headers.map((h, idx) => {
    const widthMatch = h.match(/\((\d+)\)/)
    const width = widthMatch ? parseInt(widthMatch[1], 10) : 150 // m·∫∑c ƒë·ªãnh 150
    const cleanHeader = h.replace(/\(\s*\d+\s*\)\s*$/, '').trim()
    const fieldName = formatField(cleanHeader)

    const colDef = {
      field: fieldName,
      headerName: cleanHeader,
      wrapText: true,
      autoHeight: true,
      width: width,
      minWidth: 30,
      maxWidth: 500,
      cellStyle: (params) => {
        // CƒÉn ph·∫£i cho s·ªë, cƒÉn tr√°i cho text
        return isMeasure[idx]
          ? { textAlign: 'right', fontVariantNumeric: 'tabular-nums' }
          : { textAlign: 'left' }
      }
    }

    if (isMeasure[idx]) {
      colDef.type = 'numericColumn'
      colDef.valueFormatter = (params) => {
        const v = params.value
        if (v == null || v === '') return ''
        const num = Number(v)
        if (isNaN(num)) return v
        // üîπ Format v·ªõi ph√¢n t√°ch h√†ng ngh√¨n, t·ªëi ƒëa 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        return num.toLocaleString('vi-VN', { maximumFractionDigits: 2 })
      }
    }

    return colDef
  })

  return { headers, data, isMeasure, columnDefs }
}

let gridApi = null

// Load l·∫°i d·ªØ li·ªáu v√† render
function loadAndRender(worksheet) {
  worksheet.getSummaryDataAsync({ maxRows: 0 }).then((sumData) => {
    // console.log('sumData', sumData)

    // X√°c ƒë·ªãnh c·ªôt c·∫ßn lo·∫°i b·ªè
    const excludeCols = sumData.columns
      .map((col, idx) => ({ name: col.fieldName, idx }))
      .filter(
        (c) =>
          c.name.toLowerCase().startsWith('hiden') || c.name.startsWith('AGG')
      )
      .map((c) => c.idx)

    const { headers, data, isMeasure, columnDefs } = pivotMeasureValues(
      sumData,
      excludeCols
    )

    // console.log('headers', headers)
    // console.log('columnDefs', columnDefs)
    // console.log('data', data)
    // console.log('result', result)

    console.log('isMeasure', isMeasure)

    // ======= 3Ô∏è‚É£ T√çNH T·ªîNG =======
    function calcTotals(data, numericCols) {
      const totals = {}
      numericCols.forEach((col) => {
        totals[col] = data.reduce(
          (sum, row) => sum + (Number(row[col]) || 0),
          0
        )
      })
      return totals
    }

    // ======= 4Ô∏è‚É£ C·∫§U H√åNH GRID =======
    const gridOptions = {
      theme: 'legacy',
      columnDefs,
      rowData: data,
      animateRows: true,
      defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
        filterParams: {
          textFormatter: (value) => normalizeUnicode(value)
        }
      },
      rowSelection: {
        mode: 'multiRow',
        checkboxes: true
      },

      onRowClicked: (event) => {
        // B·ªè ch·ªçn t·∫•t c·∫£ d√≤ng kh√°c
        gridApi.deselectAll()
        // Ch·ªçn d√≤ng hi·ªán t·∫°i
        event.node.setSelected(true)
      },

      domLayout: 'normal',
      onGridReady: () => updateFooterTotals(),
      onFilterChanged: () => updateFooterTotals(),
      onSortChanged: () => updateFooterTotals()
    }

    const eGridDiv = document.querySelector('#myGrid')
    // const gridApi = agGrid.createGrid(eGridDiv, gridOptions)
    if (!gridApi) {
      // ‚ùó Ch·ªâ t·∫°o grid 1 l·∫ßn
      gridApi = agGrid.createGrid(eGridDiv, gridOptions)
    } else {
      // ‚úÖ C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu
      gridApi.setGridOption('rowData', data)
      gridApi.setGridOption('columnDefs', columnDefs)
      updateFooterTotals()
    }

    // ======= 5Ô∏è‚É£ T√åM KI·∫æM =======
    document.getElementById('searchBox').addEventListener('input', function () {
      gridApi.setGridOption('quickFilterText', normalizeUnicode(this.value))
      updateFooterTotals()
    })

    // ======= 6Ô∏è‚É£ EXPORT EXCEL =======
    document.getElementById('exportBtn').addEventListener('click', function () {
      gridApi.exportDataAsCsv({
        fileName: 'data_export.csv',
        processCellCallback: (params) => params.value // l·∫•y raw value
      })
    })

    // ======= 7Ô∏è‚É£ D√íNG T·ªîNG =======
    function updateFooterTotals() {
      const allData = []
      gridApi.forEachNodeAfterFilterAndSort((node) => allData.push(node.data))

      const numericCols = columnDefs
        .filter((col) => col.type === 'numericColumn')
        .map((col) => col.field)

      const totals = calcTotals(allData, numericCols)

      let footerHtml = 'T·ªïng c·ªông: '
      numericCols.forEach((col) => {
        footerHtml += `${col}: <b>${totals[
          col
        ].toLocaleString()}</b> &nbsp;&nbsp;`
      })
      document.getElementById('footerRow').innerHTML = footerHtml
    }

    // --- Copy b·∫±ng n√∫t b·∫•m ---
    document.getElementById('copyBtn').addEventListener('click', () => {
      copySelectedRows()
    })

    // --- Copy khi Ctrl + C ---
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.key.toLowerCase() === 'c') {
        copySelectedRows()
      }
    })

    // --- H√†m th·ª±c hi·ªán copy ---
    function copySelectedRows() {
      const selectedNodes = []
      gridApi.forEachNode((node) => {
        if (node.isSelected()) selectedNodes.push(node)
      })

      if (selectedNodes.length === 0) {
        alert('‚ö†Ô∏è Ch∆∞a ch·ªçn d√≤ng n√†o!')
        return
      }

      const selectedData = selectedNodes.map((node) => node.data)
      const text = selectedData
        .map((row) => Object.values(row).join('\t'))
        .join('\n')

      // --- Fallback c·ªï ƒëi·ªÉn, t∆∞∆°ng th√≠ch m·ªçi tr√¨nh duy·ªát / Tableau Extension ---
      const textarea = document.createElement('textarea')
      textarea.value = text
      textarea.style.position = 'fixed'
      textarea.style.top = '-9999px'
      document.body.appendChild(textarea)
      textarea.focus()
      textarea.select()

      try {
        const success = document.execCommand('copy')
        if (success) {
          alert(`‚úÖ ƒê√£ copy ${selectedData.length} d√≤ng v√†o clipboard!`)
        } else {
          alert('‚ö†Ô∏è Copy kh√¥ng th√†nh c√¥ng.')
        }
      } catch (err) {
        console.error('Copy l·ªói:', err)
        alert('‚ùå Kh√¥ng th·ªÉ copy (tr√¨nh duy·ªát kh√¥ng cho ph√©p).')
      }

      document.body.removeChild(textarea)
    }
  })
}

// Khi DOM ready
document.addEventListener('DOMContentLoaded', () => {
  tableau.extensions.initializeAsync().then(() => {
    const worksheet =
      tableau.extensions.dashboardContent.dashboard.worksheets[0]

    // Load l·∫ßn ƒë·∫ßu
    loadAndRender(worksheet)

    // L·∫Øng nghe filter v√† parameter change
    worksheet.addEventListener(tableau.TableauEventType.FilterChanged, () => {
      // console.log('vao day roi')

      loadAndRender(worksheet)
    })

    tableau.extensions.dashboardContent.dashboard
      .getParametersAsync()
      .then(function (parameters) {
        parameters.forEach(function (p) {
          p.addEventListener(tableau.TableauEventType.ParameterChanged, () => {
            // console.log('vao day roi 2')
            loadAndRender(worksheet)
          })
        })
      })
  })
})
